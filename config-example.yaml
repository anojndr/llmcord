# Discord settings:

bot_token:
client_id:
status_message:

max_text: 2000 # Max TOTAL tokens for the entire prompt sent to the LLM. This includes the system prompt, all message history (user text, bot responses, external content like YouTube/Reddit/web summaries), and tokens from any image data (if applicable, for models like GPT-4 Vision). Uses tiktoken for counting. If exceeded, history is truncated.
max_images: 5
max_messages: 25

use_plain_responses: false
allow_dms: true

permissions:
  users:
    allowed_ids: []
    blocked_ids: []
  roles:
    allowed_ids: []
    blocked_ids: []
  channels:
    allowed_ids: []
    blocked_ids: []

# YouTube Data API v3 settings:
# Get an API key from Google Cloud Console: https://console.cloud.google.com/apis/credentials
# Make sure to enable the "YouTube Data API v3" for your project.
youtube_api_key: # NOTE: YouTube API still uses a single key in this implementation

# Reddit API settings:
# Create a 'script' app on Reddit: https://www.reddit.com/prefs/apps
reddit_client_id:
reddit_client_secret:
reddit_user_agent: # e.g., discord:my-llm-bot:v1.0 (by u/your_reddit_username)

# Optional: Proxy configuration for youtube-transcript-api to avoid IP blocks
# See: https://github.com/jdepoix/youtube-transcript-api#working-around-ip-bans-requestblocked-or-ipblocked-exception
# Uncomment and configure ONE of the types below if you experience transcript fetch errors (ParseError, RequestBlocked, etc.)
# proxy_config:
#   type: "webshare" # Recommended for reliability. Requires a Webshare "Residential" proxy plan.
#   # For webshare:
#   username: "YOUR_WEBSHARE_USERNAME" # Find in your Webshare Proxy Settings
#   password: "YOUR_WEBSHARE_PASSWORD" # Find in your Webshare Proxy Settings
# --- OR ---
# proxy_config:
#   type: "generic"
#   # For generic:
#   http_url: "http://user:pass@your_proxy_host:port" # Your HTTP proxy URL
#   https_url: "https://user:pass@your_proxy_host:port" # Your HTTPS proxy URL (often same as http_url)

# SerpAPI settings (NOW A FALLBACK):
# Get API keys from SerpApi: https://serpapi.com/manage-api-key
# Provide a list of keys for rotation and retries
serpapi_api_keys:
  - YOUR_SERPAPI_KEY_1
  # - YOUR_SERPAPI_KEY_2
  # - ...

# LLM settings:

providers:
  openai:
    base_url: https://api.openai.com/v1
    # Provide a list of keys for rotation and retries
    api_keys:
      - YOUR_OPENAI_KEY_1
      # - YOUR_OPENAI_KEY_2
      # - ...
    disable_vision: false
  x-ai:
    base_url: https://api.x.ai/v1
    api_keys:
      - YOUR_XAI_KEY_1
      # - ...
  google:
    # For google-genai, base_url is not used. API keys are configured directly.
    # Provide a list of Google API Keys here for rotation and retries.
    api_keys:
      - YOUR_GEMINI_KEY_1
      # - YOUR_GEMINI_KEY_2
      # - ...
  mistral:
    base_url: https://api.mistral.ai/v1
    api_keys:
      - YOUR_MISTRAL_KEY_1
      # - ...
  groq:
    base_url: https://api.groq.com/openai/v1
    api_keys:
      - YOUR_GROQ_KEY_1
      # - ...
  openrouter:
    base_url: https://openrouter.ai/api/v1
    api_keys:
      - YOUR_OPENROUTER_KEY_1
      # - ...
  # --- Local / Keyless Providers ---
  ollama:
    base_url: http://localhost:11434/v1
    api_keys: [] # Explicitly empty list for keyless providers
  lmstudio:
    base_url: http://localhost:1234/v1
    api_keys: []
  vllm:
    base_url: http://localhost:8000/v1
    api_keys: []
  oobabooga:
    base_url: http://localhost:5000/v1
    api_keys: []
  jan:
    base_url: http://localhost:1337/v1
    api_keys: []

# SearXNG instance URL for grounding enhancement:
# Used if a non-Gemini/non-Grok model is selected, to provide web search results.
searxng_base_url: http://localhost:18088 # Your SearxNG instance with /search endpoint and JSON format enabled

# Maximum character length for text extracted from each URL fetched by SearxNG.
# This helps keep the context provided to non-Gemini/non-Grok models concise.
searxng_url_content_max_length: 20000

# System prompt for the Gemini model (gemini-2.0-flash) when it's used to determine
# web search queries for grounding non-Gemini/non-Grok models.
# This prompt guides Gemini on how to generate relevant search terms.
grounding_system_prompt: |
  ANSWER IN ONLY ONE SENTENCE.

# --- Gemini Thinking Budget Settings ---
# Optional: Allows Gemini models to spend more time "thinking" before generating a response.
# This can potentially improve response quality for complex queries but may increase latency.
# Refer to Google AI documentation for "thinkingBudget" for more details.
# This setting applies ONLY to Gemini models.

# gemini_use_thinking_budget: false  # Set to true to enable the thinking_budget parameter by default for Gemini.
                                  # Users can override this with the /setgeminithinking command.
# gemini_thinking_budget_value: 1024 # The actual budget value (0-24576) to use if enabled.
                                   # This value is global and not user-configurable via command.

model: openai/gpt-4.1 # Example: Select the provider and model

extra_api_parameters:
  # Common OpenAI-compatible parameters:
  max_tokens: 4096
  temperature: 1.0
  # top_p: 1.0
  # frequency_penalty: 0.0
  # presence_penalty: 0.0

  # Example Gemini parameters (these would be used if model starts with 'google/'):
  # max_output_tokens: 4096
  # temperature: 1.0
  # top_p: 0.95
  # top_k: 40

system_prompt: |
  You are a helpful assistant.

# --- Output Sharing Settings (Optional) ---
# Enables sharing LLM output via a public ngrok URL using Grip to render Markdown.
output_sharing:
  ngrok_enabled: false # Set to true to enable this feature
  ngrok_authtoken: YOUR_NGROK_AUTHTOKEN # Your ngrok authtoken (optional but recommended)
  grip_port: 6419 # Port for the Python HTTP server (formerly Grip server)
  ngrok_static_domain: null # Example: your-reserved-domain.ngrok-free.app (requires ngrok account)
  cleanup_on_shutdown: true # Set to false to keep shared HTML files across bot restarts
  url_shortener_enabled: false # Set to true to use a URL shortener for the ngrok link
  url_shortener_service: "tinyurl" # Currently supported: "tinyurl"
  # url_shortener_api_key: null # For future services that might require an API key
